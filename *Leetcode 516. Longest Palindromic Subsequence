Question Link : https://leetcode.com/problems/longest-palindromic-subsequence/description/

Solution : 

class Solution {
private:
    int lps(string &s1,string &s2,int i,int j,vector<vector<int>>&dp){
        if(i<0 || j<0) return 0;
        if(dp[i][j] != -1) return dp[i][j];
        
        int cnt = 0;
        if(s1[i] == s2[j]){
            cnt = 1 + lps(s1,s2,i-1,j-1,dp);
        }
        else{
            cnt = max(lps(s1,s2,i-1,j,dp),lps(s1,s2,i,j-1,dp));
        }

        return dp[i][j] = cnt;
    }
public:
    int longestPalindromeSubseq(string s) {
        string s2 = s;
        reverse(s2.begin(),s2.end());
        
        int n = s.size();
        vector<vector<int>> dp(n,vector<int>(n,-1));
        return lps(s,s2,n-1,n-1,dp);
    }
};
