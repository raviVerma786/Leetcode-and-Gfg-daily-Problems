Question Link : https://www.geeksforgeeks.org/problems/subtraction-in-linked-list/1

Solution : 

class Solution {
public:
    int getLength(Node* head){
        Node* node = head;
        int len = 0;
        while(node){
            len++;
            node = node->next;
        }
        
        return len;
    }
    
    pair<Node*,Node*> compare(Node* head1,Node* head2){
        Node* node1 = head1, *node2 = head2;
        while(node1 && node2){
            if(node1->data == node2->data){
                node1 = node1->next;
                node2 = node2->next;
                continue;
            }
            if(node1->data > node2->data) return {head1,head2};
            return {head2,head1};
            
            node1 = node1->next;
            node2 = node2->next;
        }
        
        return {NULL,NULL}; //both equal numbers
    }
    
    Node* reverse(Node* head){
        Node* curr = head, *prev = NULL;
        while(curr){
            Node* temp = curr->next;
            curr->next = prev;
            prev = curr;
            curr = temp;
        }
        
        return prev;
    }
    
    Node* subtract(Node* big, Node* small){
        big = reverse(big);
        small = reverse(small);
        
        Node* node = big;
        
        while(node && small){
            if(node->data < small->data){
                node->data = (node->data + 10) - small->data;
                Node* temp = node->next;
                while(temp && temp->data == 0){
                    temp->data = 9;
                    temp= temp->next;
                }
                if(temp) temp->data -= 1;
            }
            else{
                node->data -= small->data;
            }
            
            node = node->next;
            small = small->next;
        }
        
        return reverse(big);
    }
    
    Node* subLinkedList(Node* head1, Node* head2) {
        //removing leading zeros
        while(head1 && head1->data == 0){
            head1 = head1->next;
        }
        
        while(head2 && head2->data == 0){
            head2 = head2->next;
        }
        
        //finding bigger and smaller number
        Node* big, *small;
        int l1, l2;
        l1 = getLength(head1);
        l2 = getLength(head2);
        
        if(l1 > l2){
            big = head1;
            small = head2;
        }
        else if(l2 > l1){
            big = head2;
            small = head1;
        }
        else{
            auto nodes = compare(head1,head2);
            if(!nodes.first){
                Node* ans = new Node(0);
                return ans;
            }
            
            big = nodes.first;
            small = nodes.second;
        }
        
        Node* ans = subtract(big,small);
        while(ans && ans->data == 0){
            ans = ans->next;
        }
        
        return ans;
    }
};
