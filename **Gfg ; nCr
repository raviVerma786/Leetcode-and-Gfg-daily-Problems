Question Link ; https://practice.geeksforgeeks.org/problems/ncr1019/1

Solution 1 : (most optimal)

class Solution{
public:
    int inverse(int a,int b,int mod){
        int ans = 1;
        while(b){
            if(b&1) ans = (ans *1LL * a) %mod;
            a = (a * 1LL * a)%mod;
            b = b>>1;
        }
        
        return ans;
    }
    
    int nCr(int n, int r){
        if(r > n) return 0;
        
        int mod = 1e9 + 7;
        int ans = 1;
        
        for(int i=1;i<=r;i++){
            ans = (ans *1LL* (n - r + i))%mod; // mltiplying denominator
            ans = (ans *1LL * inverse(i,mod-2,mod)) % mod; // multiplying inverse of denominator
        }
        
        return ans;
    }
};


Solution 2 : 

class Solution{
public:
    int dp[1001][1001];
    int helper(int n,int r){
        if(r > n) return 0;
        if(r==0 || r==n) return 1;
        if(dp[n][r] != -1) return dp[n][r];
        return dp[n][r] = (helper(n-1,r-1) + helper(n-1,r)) % 1000000007;
        
    }
    int nCr(int n, int r){
        memset(dp,-1,sizeof(dp));
        return helper(n,r);
    }
};


Solution 3 : 

// User function Template for C++

class Solution{
public:
    int nCr(int n, int r){
        if(r > n) return 0;
        if(n-r >= 0 && n-r < r) r = n-r;
        vector<vector<int>> dp(n+1,vector<int>(r+1,0)); //(n+1)Cr = nCr + nC(r-1)
                                                //similarly nCr = (n-1)Cr + (n-1)C(r-1)
        for(int i=1;i<=n;i++){
            dp[i][0] = 1;
            dp[i][1] = i;
        }
        int mod = 1e9 + 7;
        for(int i=2;i<=n;i++){
            for(int j=1;j<=r;j++){
                if(j>i) break;
                dp[i][j] = (dp[i-1][j] + 0LL + dp[i-1][j-1])%mod; //(n+1)Cr = nCr + nC(r-1)
            }
        }
        
        return dp[n][r];
    }
};
