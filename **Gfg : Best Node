Question Link : https://practice.geeksforgeeks.org/problems/a3493283697b7b69573a840f371a55ccd9332bb0/1

Solution : 

class Solution {
  public:
    long long dfs(int node, vector<int> adj[], vector<int> &A, bool f){
        long long ans = LLONG_MIN;
        for(int child: adj[node]){
            ans = max(ans, dfs(child, adj, A, !f));
        }
        
        long long nodeVal = A[node-1];
        if(f)
            nodeVal = -nodeVal;
            
        if(ans == LLONG_MIN)
            return nodeVal;
            
        return ans + nodeVal;
    }
    
    long long bestNode(int N, vector<int> &A, vector<int> &P) {
        vector<int> adj[N+1];
        for(int i=1; i<N; i++){
            adj[P[i]].push_back(i+1);
        }
        
        long long ans = LLONG_MIN;
        for(int i=1; i<=N; i++){
            ans = max(ans, dfs(i, adj, A, 0));
        }
        
        return ans;
    }
    
};



Solution 2 : (Best Solution )

class Solution {
  public:
    // https://www.youtube.com/watch?v=uOqlj3FNTeM&ab_channel=CODEKARLO
    
    long long bestNode(int N, vector<int> &A, vector<int> &P) {
       vector<int> sign(N+1,0);
       for(int i=1;i<N;i++){
           sign[P[i]]++;
       }
       
       long long ans = INT_MIN;
       for(int i=1;i<=N;i++){
           if(sign[i]==0){
               //means leaf node
               int j=i;
               long long temp = 0;
               while(j != -1){
                   temp += A[j-1];
                   j = P[j-1];
                   ans = max(ans,temp);
                   temp *= -1;
               }
    
           }
       }
       
       return ans;
    }
