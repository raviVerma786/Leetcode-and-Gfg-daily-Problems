Question Link :https://practice.geeksforgeeks.org/problems/aa0000a5f710ce8d41366b714341eef644ec7b82/1

Solution :

class Solution{ 
private:
    // int binExponentiation(int x,int y,int mod){
    //     int ans = 1;
    //     while(y){
    //         if(y&1) ans = (ans * 1ll * x)%mod;
            
    //         x = (x *1ll* x) % mod;
    //         y = y>>1;
    //     }
        
    //     return ans;
    // }
public:
    int countPaths(int N){
       if(N==1) return 0;
       int mod = 1e9 + 7;
       long long last = 3,secondLast = 0;//two previous terms
       int curr = 3; // second term of the series
       
       //already two terms taken start with 3rd term
       // we have to find 3^(n-1) - last term

       for(int n=2;n<N;n++){
        //   curr = (binExponentiation(3,n-1,mod) - last + mod)%mod;
        // (secondLast + last) is the previous power of 3 and multiplying 3 gives current power of 3
           curr = (((secondLast + last)%mod * 3)%mod  - last + mod)%mod;
           secondLast = last;
           last = curr;
       }
       
       return curr;
    }
};
