Question Link : https://leetcode.com/problems/design-underground-system/description/

Solution : 

class dataa{
public:
    string from;
    string to;
    int in;
    int out;
};
class UndergroundSystem {
public:
    map<pair<string,string>,vector<int>> loc;
    map<int,dataa> store;
	
    UndergroundSystem() {
    }
    
    void checkIn(int id, string stationName, int t) {
        dataa d;
        d.from = stationName;
        d.in = t;
        store[id] = d;
    }
    
    void checkOut(int id, string stationName, int t) {
        dataa d = store[id];
        d.to = stationName;
        d.out = t;
        loc[{d.from,d.to}].push_back(d.out-d.in);
    }
    
    double getAverageTime(string startStation, string endStation) {
        auto &time = loc[{startStation,endStation}];
        double size = time.size();
        return accumulate(time.begin(),time.end(),0)/size;;
    }
};

Solution 2 : (Better to understand)

class UndergroundSystem {
private:
    map<int,pair<string,int>> mp; // mp[id] = {start,checkinTime}
    map<pair<string,string>,pair<int,double>> mpTime; //mpTime[{start,end}] => {people,totalTime}
public:
    UndergroundSystem() {
        mp.clear();
    }
    
    void checkIn(int id, string stationName, int t) {
        mp[id] = {stationName,t};
    }
    
    void checkOut(int id, string stationName, int t) {
        string start = mp[id].first, end = stationName;
        int timeTaken = (t - mp[id].second);

        mpTime[{start,end}].first++;
        mpTime[{start,end}].second += timeTaken;
        
    }
    
    double getAverageTime(string startStation, string endStation) {
        int people = mpTime[{startStation,endStation}].first;
        double totalTime = mpTime[{startStation,endStation}].second;

        return totalTime/people;
    }
};

