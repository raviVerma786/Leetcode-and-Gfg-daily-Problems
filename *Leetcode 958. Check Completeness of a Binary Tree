Question Link : https://leetcode.com/problems/check-completeness-of-a-binary-tree/description/

Solution : 

class Solution {
public:
    int height(TreeNode* root){
        if(!root) return 0;
        return 1 + max(height(root->left),height(root->right));
    }
    
    bool isCompleteTree(TreeNode* root) {
        queue<TreeNode*> q;
        q.push(root);
        
        int hgt = height(root);
        int level = 0;
       
        for(int i=0;i<(hgt-1);i++){
            int n = q.size();
            if(n != (1<<level)) return false;
            
            bool firstNull = false;
            for(int i=0;i<n;i++){
                TreeNode* node = q.front();
                q.pop();

                if(node->left) {
                    if(firstNull) return false;
                    q.push(node->left);
                }
                else firstNull = true;

                if(node->right) {
                    if(firstNull) return false;
                    q.push(node->right);
                }
                else firstNull = true;
            }

            level++;
        }
        
        return true;
    }
};
