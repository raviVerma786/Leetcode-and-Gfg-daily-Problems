Question Link : https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-transaction-fee/description/

solution 1 : (Memoization):

class Solution {
public:
    int helper(vector<int>&prices,int fee,int i,bool buy,vector<vector<int>>&dp){
        if(i == prices.size()) return 0;
        if(dp[i][buy] != -1) return dp[i][buy];
        
        int profit = 0;
        if(buy){
            profit = max(-prices[i] - fee + helper(prices,fee,i+1,!buy,dp),helper(prices,fee,i+1,buy,dp));
        }
        else{
            profit = max(prices[i] + helper(prices,fee,i+1,!buy,dp),helper(prices,fee,i+1,buy,dp));
        }

        return dp[i][buy] = profit;
    }
    
    int maxProfit(vector<int>& prices, int fee) {
        int n = prices.size();
        vector<vector<int>> dp(n,vector<int>(2,-1));
        return helper(prices,fee,0,true,dp);
    }
};


Solution 2 : (iterative):

class Solution {
public:
    int maxProfit(vector<int>& prices, int fee) {
        int n = prices.size();
        vector<vector<int>> dp(n+1,vector<int>(2,0));

        for(int i=n-1;i>=0;i--){
            for(int buy = 1; buy>=0 ; buy--){
                int profit = 0;
                if(buy){
                    profit = max(-prices[i] - fee + dp[i+1][0],dp[i+1][1]);
                }
                else{
                    profit = max(prices[i] + dp[i+1][1],dp[i+1][0]);
                }

                dp[i][buy] = profit;
            }
        }
        return dp[0][1];
    }
};

Solution 3 : (optimised solution 2) 

class Solution {
public :
    int maxProfit(vector<int>& prices, int fee) {
        int n = prices.size();
        vector<vector<int>> dp(n+1,vector<int>(2,0));

        for(int i=n-1;i>=0;i--){
            dp[i][1] = max(-prices[i] - fee + dp[i+1][0],dp[i+1][1]);
            dp[i][0] = max(prices[i] + dp[i+1][1],dp[i+1][0]);
        }
        return dp[0][1];
    }
};

Solution 4 : (space optimised solution)

class Solution {
public:
    int maxProfit(vector<int>& prices, int fee) {
        int n = prices.size();

        vector<int>after(2,0);
        vector<int>curr(2,0);

        for(int i=n-1;i>=0;i--){
            curr[1] = max(-prices[i] - fee + after[0],after[1]);
            curr[0] = max(prices[i] + after[1],after[0]);

            after = curr;
        }
        return after[1];
    }
};
