Question Link :https://leetcode.com/problems/lru-cache/description/

Solution : 

//https://www.youtube.com/watch?v=xDEuM5qa0zg&ab_channel=takeUforward
// https://www.youtube.com/watch?v=Xc4sICC8m4M&ab_channel=takeUforward
class LRUCache {
public:
//define doubly linked list
    class node{
        public:
        int key,val;
        node* next , *prev;
        node(int k,int v){
            key = k;
            val = v;
            next = NULL;
            prev = NULL;
        }
    };
    
    //defining required data structures
    node* head = new node(-1,-1);
    node* tail = new node(-1,-1);
    int cap;
    unordered_map<int,node*> mp;

    LRUCache(int capacity) {
        cap = capacity;
        head->next = tail;
        tail->prev = head;
    }
    
    // adding one method to add nodes
    void addNode(node* newNode){
        node* temp = head->next;
        newNode->next = temp;
        newNode->prev = head;
        head->next = newNode;
        temp->prev = newNode;
    }

    //adding method to delete nodes
    void deleteNode(node* delNode){
        node* right = delNode->next;
        node* left = delNode->prev;

        left->next = right;
        right->prev = left;
    }
    int get(int key) {
        if(mp.count(key)){
            node* resNode = mp[key];
            int res = resNode->val;
            mp.erase(key);
            deleteNode(resNode);
            addNode(resNode);
            mp[key] = head->next;
            return res;
        }

        return -1;
    }
    
    void put(int key, int value) {
        if(mp.count(key)){
            node* curr = mp[key];
            mp.erase(key);
            deleteNode(curr);
        }

        if(mp.size() == cap){
            mp.erase(tail->prev->key);
            deleteNode(tail->prev);
        }

        addNode(new node(key,value));
        mp[key] = head->next;
    }
};

