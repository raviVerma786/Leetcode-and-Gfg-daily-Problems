Question Link : https://leetcode.com/problems/check-if-there-is-a-valid-partition-for-the-array/description/

Solution : 

class Solution {
public:
    bool helper(vector<int>&nums,int i,vector<int>&dp){
        int n = nums.size();
        if(i == n) return true;
        if(dp[i] != -1) return dp[i];
        
        bool res = false;
        if(i+1 < n && nums[i] == nums[i+1]){
            res = res || helper(nums,i+2,dp);
            if(i+2 < n && nums[i] == nums[i+2]){
                res = res || helper(nums,i+3,dp);
            }
        }

        if(i+2 < n && nums[i+1] == nums[i] + 1 && nums[i+2] == nums[i+1] + 1){
            res = res || helper(nums,i+3,dp);
        }

        return dp[i] = res;
    }

    bool validPartition(vector<int>& nums) {
        int n = nums.size();
        vector<int> dp(n,-1);
        int ans = 0;
        return helper(nums,0,dp);
    }
};
