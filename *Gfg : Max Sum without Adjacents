Question Link :https://practice.geeksforgeeks.org/problems/7a33c749a79327b2889d420dd80342fff33aac6d/1

Solution 1: O(n) space solution

class Solution{
public:	
	int findMaxSum(int *arr, int n,int i=0) {
	    int dp[n][2] {0}; // dp[i][0]=>when i not taken,dp[i][1]=>when i is taken
	    dp[0][1]=arr[0];
	    for(int i=1;i<n;i++){
	        dp[i][0] = max(dp[i-1][0],dp[i-1][1]);
	        dp[i][1] = arr[i] + dp[i-1][0];
	    }
	    
	    return max(dp[n-1][0],dp[n-1][1]);
	}
};



Solution 2 : O(1) space solution optimized from solution 1

class Solution{
public:	
	int findMaxSum(int *arr, int n,int i=0) {
	   int lastTaken = arr[0],lastNotTaken = 0,currTaken=arr[0],currNotTaken=0;
	   for(int i=1;i<n;i++){
	       currNotTaken = max(lastTaken,lastNotTaken);
	       currTaken = arr[i] + lastNotTaken;
	       
	       lastNotTaken = currNotTaken;
	       lastTaken = currTaken;
	   }
	   
	   return max(currNotTaken,currTaken);
	}
};
