Question link : https://leetcode.com/problems/soup-servings/description/

Solution : 

class Solution {
public:
    double helper(int a,int b,map<pair<int,int>,double>& mp){
        if(a<=0 && b<=0) return 0.5;
        else if(a<=0) return 1;
        else if(b<=0) return 0;
        if(mp.count({a,b})) return mp[{a,b}];

        double first = helper(a - 100,b - 0, mp);
        double second = helper(a - 75, b - 25, mp);
        double third = helper(a - 50, b - 50, mp);
        double fourth = helper(a - 25, b - 75, mp);

        return mp[{a,b}] = 0.25*(first + second + third + fourth);
    }

    double soupServings(int n) {
        if(n > 5000) return 1.0;
        
        map<pair<int,int>,double> mp;
        return helper(n,n,mp);
    }
};
