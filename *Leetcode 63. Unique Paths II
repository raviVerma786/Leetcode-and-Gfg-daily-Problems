Question Link : https://leetcode.com/problems/unique-paths-ii/description/

Solution : Recursive Memoized solution 

class Solution {
public:
    int solve(vector<vector<int>>& grid,int i,int j,vector<vector<int>>&dp){
        if(i<0 || j<0 || i>=grid.size() || j>=grid[0].size() || grid[i][j] == 1) return 0;
        if(i==grid.size()-1 && j==grid[0].size()-1) return 1;
        if(dp[i][j] != -1) return dp[i][j];
        
        return dp[i][j] = solve(grid,i,j+1,dp) + solve(grid,i+1,j,dp);
    }
    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        int m = obstacleGrid.size(),n = obstacleGrid[0].size();
        vector<vector<int>>dp(m,vector<int>(n,-1));
        return solve(obstacleGrid,0,0,dp);
    }
};


Solution 2 : Iterative soluiton

class Solution {
public:
    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        int m = obstacleGrid.size(),n = obstacleGrid[0].size();
        if(obstacleGrid[0][0] == 1 || obstacleGrid[m-1][n-1] == 1) return 0;

        vector<vector<long long>>dp(m,vector<long long>(n,0));
        dp[m-1][n-1] = 1;

        for(int i=m-1;i>=0;i--){
            for(int j=n-1;j>=0;j--){
                if(i+1 < m && obstacleGrid[i+1][j] == 0) dp[i][j] += dp[i+1][j];
                if(j+1 < n && obstacleGrid[i][j+1] == 0) dp[i][j] += dp[i][j+1];
            }
        }

        return dp[0][0];
    }
};

