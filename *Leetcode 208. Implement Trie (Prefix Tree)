Question Link : https://leetcode.com/problems/implement-trie-prefix-tree/description/

Solution :

struct Node{
    Node* link[26];
    bool flag;

    bool containsKey(char ch){
        return link[ch-'a'];
    }
    
    void createTrie(char ch,Node* node){
        link[ch - 'a'] = node;
    }
    
    Node* getNext(char ch){
        return link[ch - 'a'];
    }

    void setEnd(){
        flag = true;
    }

    bool isEnd(){
        return flag;
    }
};
class Trie {
private:
    Node* root;
public:
    Trie() {
         root = new Node();
    }
    
    void insert(string word) {
        Node* node = root;
        for(int i=0;i<word.size();i++){
            if(!node->containsKey(word[i])){
               node->createTrie(word[i],new Node());
            }
            //Move to the reference trie
           node = node->getNext(word[i]);
        }
        node->setEnd();
    }
    
    bool search(string word) {
        Node* node = root;
        for(int i=0;i<word.size();i++){
            if(!node->containsKey(word[i])) return false;
            node = node->getNext(word[i]);
        }
        return node->isEnd();
    }
    
    bool startsWith(string prefix) {
        Node* node = root;
        for(int i=0;i<prefix.size();i++){
            if(!node->containsKey(prefix[i])) return false;
            node = node->getNext(prefix[i]);
        }
        return true;
    }
};
