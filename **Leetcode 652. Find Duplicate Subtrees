Question Link : https://leetcode.com/problems/find-duplicate-subtrees/description/

Soluiton : 

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
private:
    string solve(TreeNode* root,vector<TreeNode*>&ans,unordered_map<string,int>&mp){
        if(!root) return "#";
        string s = solve(root->left,ans,mp) + "," + solve(root->right,ans,mp) + "," + to_string(root->val);

        mp[s]++;
        if(mp[s] == 2) ans.push_back(root);

        return s;
    }
   
public:
    vector<TreeNode*> findDuplicateSubtrees(TreeNode* root) {
        vector<TreeNode*> ans;
        unordered_map<string,int> mp;
        solve(root,ans,mp);

        return ans;
    }
};
