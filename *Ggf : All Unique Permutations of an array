Question Link : https://www.geeksforgeeks.org/problems/all-unique-permutations-of-an-array/1

Solution : 

class Solution {
  public:
    bool nextPermutation(vector<int>&arr){
        int n = arr.size();
        int i = n-2;
        while(i>=0 && arr[i] >= arr[i+1]){
            i--;
        }
        
        if(i == -1) return false;
        
        int j = n-1;
        while(j>i && arr[j] <= arr[i]){
            j--;
        }
        swap(arr[i],arr[j]);
        
        reverse(arr.begin() + i + 1,arr.end());
        return true;
    }
    
    vector<vector<int>> uniquePerms(vector<int> &arr ,int n) {
        sort(arr.begin(),arr.end());
        vector<vector<int>> ans;
        ans.push_back(arr);
        
        while(nextPermutation(arr)){
            ans.push_back(arr);
        }
        
        // cout<<ans.size()<<endl;
        return ans;
    }
};
