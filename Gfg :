Question Link :

Solution:

//https://www.youtube.com/watch?v=d4y5ICnk6yo&ab_channel=CodeSpeak


class Solution {
  public:
  //https://www.youtube.com/watch?v=d4y5ICnk6yo&ab_channel=CodeSpeak
    int checkbit(int n,int i){
       return (n & (1<<i));  //checks if jth element present in mask
    }
    
    long long int luckyPermutations(int N, int M, vector<int> arr,vector<vector<int>> graph) {
        
        vector<vector<long long>> dp(N,vector<long long>(1<<N,0));
        
        vector<vector<bool>> edge(N,vector<bool>(N,false));
        
        for(vector<int>& v : graph){
            edge[v[0]-1][v[1]-1] = true;
            edge[v[1]-1][v[0]-1] = true;
        }
        
        for(int i=0;i<N;i++){
            dp[i][1<<i] = 1;
        }
        
        for(int mask = 0;mask<(1<<N);mask++){
            for(int i=0;i<N;i++){
                if(((mask>>i)&1)){ //if ith element present in mask
                    for(int j=0;j<N;j++){
                    if(i != j && arr[i] != arr[j] && edge[arr[i]-1][arr[j]-1] && checkbit(mask,j)){
                        dp[i][mask] += dp[j][(mask ^ (1<<i))];
                    }
                }
                }
            }
        }
        
        long long ans = 0;
        for(int i=0;i<N;i++){
            ans += dp[i][(1<<N) - 1];
        }
        
        return ans;
    }
};
