Question Link : https://leetcode.com/problems/number-of-ways-of-cutting-a-pizza/description/

Solution : 

class Solution {
// https://www.youtube.com/watch?v=g2D-HymlQqQ&ab_channel=DeepCodes
public:
    int mod = 1e9 + 7;
    int solve(vector<vector<int>>&presum,vector<vector<vector<int>>> &dp,int k,int r,int c,int m,int n){
        if(presum[r][c] == 0) return 0;
        if(k == 0) return 1;
        if(dp[r][c][k] != -1) return dp[r][c][k];

        int ans = 0;
        for(int nr = r+1;nr<m;nr++){
            if(presum[r][c] - presum[nr][c] > 0){
                ans = (ans + solve(presum,dp,k-1,nr,c,m,n)) % mod;
            }
        }

        for(int nc = c+1;nc<n;nc++){
            if(presum[r][c] - presum[r][nc] > 0){
                ans = (ans + solve(presum,dp,k-1,r,nc,m,n))%mod;
            }
        }

        return dp[r][c][k] = ans;
    }

    int ways(vector<string>& pizza, int k) {
        int m = pizza.size(), n = pizza[0].size();
        vector<vector<int>> presum(m+1,vector<int>(n+1,0));

        for(int i=m-1;i>=0;i--){
            for(int j=n-1;j>=0;j--){
                presum[i][j] = presum[i][j+1] + presum[i+1][j] - presum[i+1][j+1]+(pizza[i][j]=='A');
            }
        }

        vector<vector<vector<int>>> dp(m,vector<vector<int>>(n,vector<int>(k,-1)));
        return solve(presum,dp,k-1,0,0,m,n); // total k-1 cuts 
    }
};
