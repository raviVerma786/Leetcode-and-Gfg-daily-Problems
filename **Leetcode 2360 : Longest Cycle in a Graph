Question Link :https://leetcode.com/problems/longest-cycle-in-a-graph/description/

Solution :

class Solution
{
//https://www.youtube.com/watch?v=PyCE2tUHl1I&ab_channel=CodeFreaks
public:
    int longestCycle(vector<int>& edge) {
    int N = edge.size();
    vector<int> count(N,0);
    for(int i : edge){
        if(i==-1) continue;
        count[i]++;
    }
    
    vector<bool> vis(N,false);
    queue<int> q;
    for(int i=0;i<N;i++){
        if(count[i]==0){
            q.push(i);
            vis[i] = true;
        }
    }
    
    while(!q.empty()){
        int curr = q.front();
        q.pop();
        
        int par = edge[curr];
        if(par == -1) continue;
        count[par]--;
        if(count[par] == 0){
            q.push(par);
            vis[par] = true;
        }
    }
    
    int ans = -1;
    for(int i=0;i<N;i++){
        if(vis[i]) continue;
        
        int cycle = 0;
        for(int j=i;!vis[j];j=edge[j]){
            cycle++;
            vis[j] = true;
        }
        
        ans = max(ans,cycle);
    }
    
    return ans;
    }
};


Solution 2 ; 

class Solution {
    // https://www.youtube.com/watch?v=vc_kz2M-jw4&ab_channel=CodewithAlisha
private:
    int ans = -1;
    void dfs(vector<int>&edges,vector<int>&dist,vector<bool>&vis,vector<bool>&extra,int node,int distance){
        if(node != -1){
            if(!vis[node]){
                vis[node] = true;
                extra[node] = true;
                dist[node] = distance;
                dfs(edges,dist,vis,extra,edges[node],distance + 1);
                extra[node] = false;
            }
            else if(extra[node]){
                //means already visited ,cycle present
                ans = max(ans,distance - dist[node]);
            }
        }
    }
public:
    int longestCycle(vector<int>& edges) {
        int n = edges.size();
        vector<int>dist(n,0);
        vector<bool>vis(n,false);
        vector<bool>extra(n,false);
        
        for(int i=0;i<n;i++){
            if(!vis[i]){
                dfs(edges,dist,vis,extra,i,0);
            }
        }

        return ans;
    }
};
