Question Link : https://leetcode.com/problems/frog-jump/description/

Solution:  

class Solution {
    // https://www.youtube.com/watch?v=1V8gRXh1qbU&ab_channel=Pepcoding
public:
    bool canCross(vector<int>& stones) {
        int n = stones.size();
        map<int,unordered_set<int>> mp;
        for(int i : stones){
            unordered_set<int> st;
            mp[i] = st;
        }

        mp[0].insert(1);
        for(int i=0;i<n;i++){
            int currStone = stones[i];
            unordered_set<int> jumps = mp[currStone];

            for(int jump : jumps){
                int pos = currStone + jump;
                if(pos == stones[n-1]) return true;

                if(mp.count(pos)){
                    mp[pos].insert(jump);
                    mp[pos].insert(jump + 1);
                    if(jump - 1 > 0) mp[pos].insert(jump-1);
                }
            }
        }

        return false;
    }
};
