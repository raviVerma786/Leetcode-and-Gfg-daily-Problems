Question Link : https://leetcode.com/problems/construct-binary-tree-from-inorder-and-postorder-traversal/description/

Solution : 

class Solution {
public:
// https://www.youtube.com/watch?v=LgLRTaEMRVc&ab_channel=takeUforward
//is : inorder start, ie : inorder end, ps : postorder start, pe : postorder end
    TreeNode* helper(vector<int>& inorder, vector<int>& postorder,unordered_map<int,int>&mp,int is,int ie,int ps,int pe){
       if(is > ie || ps > pe) return NULL;

       int idx = mp[postorder[pe]];
       TreeNode* root = new TreeNode(inorder[idx]);
       root->left = helper(inorder,postorder,mp,is,idx-1,ps,ps + (idx - is) - 1);
       root->right = helper(inorder,postorder,mp,idx+1,ie,ps + (idx - is),pe-1);
       return root;
    }
    
    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
        int n = inorder.size();
        unordered_map<int,int> inorderIndex;
        for(int i=0;i<n;i++){
            inorderIndex[inorder[i]] = i;
        }

        return helper(inorder,postorder,inorderIndex,0,n-1,0,n-1);
    }
};
