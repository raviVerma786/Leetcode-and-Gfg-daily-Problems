Question Link :https://practice.geeksforgeeks.org/problems/eae1fbd0ac8f213a833d231e26ba4d829e79dd9c/1

Solution :

class Solution
{
public:
    int intersectPoint(Node* head1, Node* head2)
    {
        // adding 3000 in each element of head1
        Node* temp = head1;
        while(temp){
            temp->data += 3000;
            temp = temp->next;
        }
        
        //Now traverse head2 and if we get any data greater than 1000 then that is the common Point
        Node* common = head2;
        while(common){
            if(common->data > 1000) break;
            common = common->next;
        }
        
        // subtracting 3000 from each element of head1 to maintain original List
        temp = head1;
        while(temp){
            temp->data -= 3000;
            temp = temp->next;
        }
        
        //return common 
        return common->data;
    }
};

Solution 2 : (Best)

class Solution
{
public:
    int getLength(Node* head)
    {
        int l=0;
        while(head)
        {
            head=head->next;
            l++;
        }
        return l;
    }
    int intersectPoint(Node* head1, Node* head2)
    {
        // adding 3000 in each element of head1
        Node* h1 = head1,*h2 = head2;
        int len1 = getLength(h1);
        int len2 = getLength(h2);
        
        h1 = head1;
        h2 = head2;
        while(len1 > len2){
            len1--;
            h1 = h1->next;
        }
        
        while(len2 > len1){
            len2--;
            h2 = h2->next;
        }
        
        //now both have same length
        while(h1 && h2){
            if(h1 == h2) return h1->data;
            h1 = h1->next;
            h2 = h2->next;
        }
        
        return -1;
    }
};
