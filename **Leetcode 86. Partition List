Question Link : https://leetcode.com/problems/partition-list/description/

Solution : 

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* partition(ListNode* head, int x) {
        if(!head) return head;
        ListNode* insertNode = new ListNode(0),*temp = head;
        insertNode->next = head;
        
        //finding node to insert elements and if no such node then return the original list
        while(temp->val < x){
            insertNode = temp;
            temp = temp->next;
            if(!temp) return head;
        }
        //store insertNode in case of insertion before head then return temp->next as new head
        ListNode* node = temp;
        ListNode* prev = node;
        node = node->next;
        temp = insertNode;

        
        //final operations
        while(node){
            if(node->val < x){
                ListNode* tempNode = node;
                node = node->next;
                prev->next = node;
                tempNode->next = insertNode->next;
                insertNode->next = tempNode;
                insertNode = insertNode->next;
                continue;
            }
            prev = node;
            node = node->next;
        }
        
        return head->val >= x ? temp->next : head;
    }
};
