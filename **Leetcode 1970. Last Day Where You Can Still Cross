Question Link : https://leetcode.com/problems/last-day-where-you-can-still-cross/description/

Solution : 

class Solution {
    // https://www.youtube.com/watch?v=Xd8jL-w0Q9Q&ab_channel=CodersCamp
public:
    bool isPossible(vector<vector<int>>& cells,int m, int n,int dayAt){
        vector<vector<int>>grid(m,vector<int>(n,0));

        //filling the cells with water as given cells till dayAt
        for(int i=0;i<dayAt;i++){
            grid[cells[i][0] - 1][cells[i][1] - 1] = 1;
        }
        
        //direction array
        int dx[4] = {1,0,-1,0};
        int dy[4] = {0,1,0,-1};
    
        queue<pair<int,int>> q; //{row,col}

        //inserting every possible first row cells in queue
        for(int i=0;i<n;i++){
            if(grid[0][i] == 0) q.push({0,i});
        }
        
        //finding path is possible or not
        while(!q.empty()){
            int x = q.front().first, y = q.front().second;
            q.pop();
            
            if(x == m-1) return true;

            for(int k=0;k<4;k++){
                int r = x + dx[k], c = y + dy[k];
                if(r>=0 && c>=0 && r<m && c<n && grid[r][c] == 0){
                    q.push({r,c});
                    grid[r][c] = 1;
                }
            }
        }

        return false;
    }

    int latestDayToCross(int row, int col, vector<vector<int>>& cells) {
        int ans = 0;
        
        int low = 0,high = cells.size() - 1;
        while(low <= high){
            int mid = (low + high)/2;
            if(isPossible(cells,row,col,mid)){
                low = mid + 1;
                ans = mid;
            }
            else high = mid - 1;
        }

        return ans;
    }
};
