Question Link : https://leetcode.com/problems/number-of-increasing-paths-in-a-grid/description/

Solution :

class Solution {
    //parent : https://leetcode.com/problems/longest-increasing-path-in-a-matrix/description/
    //intution : find the count for each element for which element is involved in multiple increasing sequences and adding all will give our ans
private:
    int mod = 1e9 + 7;
    int lip(vector<vector<int>>&matrix,int i,int j,vector<vector<int>>&dp){
        if(i<0 || j<0 || i==matrix.size() || j==matrix[0].size()) return 0;
        if(dp[i][j] != -1) return dp[i][j];

        int c1 = 1,c2=1,c3=1,c4=1;
        //up
        if(i-1 >= 0 && matrix[i-1][j] > matrix[i][j])
            c1 = max(c1,1 + lip(matrix,i-1,j,dp));
    
        //down
        if(i+1 < matrix.size() && matrix[i+1][j] > matrix[i][j])
             c2 = max(c2,1 + lip(matrix,i+1,j,dp));

        //left
         if(j-1 >=0 && matrix[i][j-1] > matrix[i][j])
             c3 = max(c3,1 + lip(matrix,i,j-1,dp));

        //right
        if(j+1 < matrix[0].size() && matrix[i][j+1] > matrix[i][j])
            c4 = max(c4,1 + lip(matrix,i,j+1,dp));

        return dp[i][j] = (c1  + c2 + c3 + c4 - 3) % mod; // 3 is decreased because same element in all 4 function call and we need to take only once
    }

public:
    int countPaths(vector<vector<int>>& matrix) {
       int m = matrix.size(), n= matrix[0].size();
        vector<vector<int>> dp(m,vector<int>(n,-1));

        int ans = 0;
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                ans = (ans + lip(matrix,i,j,dp))%mod;
            }
        }
        
        return ans;
    }
};
