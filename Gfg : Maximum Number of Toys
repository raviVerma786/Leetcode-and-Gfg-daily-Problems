Question Link : https://practice.geeksforgeeks.org/problems/maximum-number-of-toys/1

Solution 1 : (TLE):

class Solution{
public:
  vector<int> maximumToys(int N,vector<int> A,int Q,vector<vector<int>> Queries){
      vector<pair<int,int>> toys; //{price,index}
      for(int i=0;i<N;i++){
          toys.push_back({A[i],i+1});
      }
      sort(toys.begin(),toys.end());
      
      
      //Now toys array is sorted accoding price so that we can use greedy approach
      vector<int> ans;
      //solving queries
      for(vector<int>&query : Queries){
          int cost = query[0],k = query[1];
          unordered_set<int> broken;
          for(int i=2;i<query.size();i++){
              broken.push_back(query[i]);
          }
          
          int cnt = 0;
          for(i=0;i<N;i++){
              if(broken.count(toys[i].second)) continue;
              
              if(toys[i].first <= cost){
                  cnt++;
                  cost -= toys[i].first;
              }
          }
          
          ans.push_back(cnt);
          
      }
      
      return ans;
  }
};

Solution 2 : (Using Fenwick Tree)

const int N=1e6+5;
int fr[N];
class tree{
public:
  vector<long long> bit;
  tree(){
    bit=vector<long long>(N);
  }
  void add(int node,int v)
  {
     for(;node<N;node+=(node&(-node)))
      bit[node]+=v;
  }
  long long get(int node)
  {
    long long x=0;
    for(;node>0;node-=(node&(-node)))
      x+=bit[node];
    return x;
  }
};

class Solution{
public:
  vector<int> maximumToys(int N,vector<int> A,int Q,vector<vector<int>> Queries){
    vector<int> res;
    tree obj1,obj2;

    for(auto i:A){
      fr[i]++;
    }

    for(int i=0;i<A.size();i++){
      obj1.add(A[i],A[i]);
      obj2.add(A[i],1);
    }
    for(auto i:Queries){
      long long C=i[0];
      for(int j=2;j<i.size();j++){
        obj1.add(A[i[j]-1],-A[i[j]-1]);
        obj2.add(A[i[j]-1],-1);
      }
      long long lw=1,hg=1e6;
      long long pos=1e6;
      while(lw<=hg){
        int mid=(lw+hg)/2;
        if(obj1.get(mid)>=C){
          pos=mid;
          hg=mid-1;
        }
        else{
          lw=mid+1;
        }
      }

      long long ans=obj2.get(pos-1);
      long long mx=min((C-obj1.get(pos-1))/pos,(long long)fr[pos]);
      ans+=mx;
      res.push_back(ans);
      for(int j=2;j<i.size();j++){
        obj1.add(A[i[j]-1],A[i[j]-1]);
        obj2.add(A[i[j]-1],1);
      }
    }
    
    return res;
  }
};
