Question Link : https://practice.geeksforgeeks.org/problems/c670bf260ea9dce6c5910dedc165aa403f6e951d/1

Solution 1: O(n logn)

class Solution {
  public:
    vector<int> getDistinctDifference(int N, vector<int> &A) {
        unordered_map<int,int> left,right;
        for(int i=0;i<N;i++) right[A[i]]++;
        
        vector<int> ans;
        for(int i=0;i<N;i++){
            right[A[i]]--;
            if(right[A[i]] == 0) right.erase(A[i]);
            
            ans.push_back(left.size() - right.size());
            
            left[A[i]]++;
        }
        
        return ans;
    }
};

Solution 2 O(n):

class Solution {
  public:
    vector<int> getDistinctDifference(int N, vector<int> &A) {
        unordered_set<int> st;
        
        vector<int> ans;
        //calculating left unique
        for(int i=0;i<N;i++){
            ans.push_back((int)st.size());
            st.insert(A[i]);
        }
        
        st.clear();
        //now decreasing right unique from each indexes
        for(int i=N-1;i>=0;i--){
            ans[i] -= st.size();
            st.insert(A[i]);
        }
        
        return ans;
    }
};
