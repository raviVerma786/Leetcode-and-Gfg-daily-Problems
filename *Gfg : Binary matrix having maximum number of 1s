Question Link : https://practice.geeksforgeeks.org/problems/77e1c3e12cd148f835d53eb168d4472b2ff539fa/1

Solution : O(nlogn) solution

class Solution {
public:
    vector<int> findMaxRow(vector<vector<int>> mat, int N) {
        int row = 0,ones = 0;
        
        for(int i=0;i<N;i++){
            int firstOnePos = upper_bound(mat[i].begin(),mat[i].end(),0) - mat[i].begin();
            int onesInRow = N - firstOnePos;
            
            if(onesInRow > ones){
                row = i;
                ones = onesInRow;
            }
        }
        
        return {row,ones};
    }
};

Solution 2 : O(n) Solution

class Solution {
public:
    vector<int> findMaxRow(vector<vector<int>> mat, int N) {
        //code here
        int i=0;
        int j=N-1;
        
        
        int row=0;
        int one_count=0;
        while(j>=0 and i<N)
        {
            if(mat[i][j]==1)
            {
                one_count++;
                row=i;
                j--;
            }
            else
            {
                i++;
            }
        }
        
        vector<int>ans;
        ans.push_back(row);
        ans.push_back(one_count);
        
        return ans;
    }
};
