Question Link : https://leetcode.com/problems/minimum-rounds-to-complete-all-tasks/submissions/871149366/

Solution : 

class Solution {
public:
    int minimumRounds(vector<int>& tasks) {
        unordered_map<int,int> mp;
        for(int i : tasks) mp[i]++;
        
        int ans = 0;
        for(pair<int,int> p : mp){
            int cntTask = p.second;
            if(cntTask == 1) return -1;
            
            if(cntTask %3 != 0 && cntTask %2 != 0){
                ans++;
                cntTask -= 3; //now it is divisible by 2
            }
            
            if(cntTask % 3 == 0){
                ans += cntTask / 3;
            }
            else if(cntTask % 2 == 0){
                ans += (2 * (cntTask/6));// we are using 3 two times each time
                cntTask = cntTask % 6; // ramaining task count

                ans += cntTask/2;
            }
        }

        return ans;
    }
};
