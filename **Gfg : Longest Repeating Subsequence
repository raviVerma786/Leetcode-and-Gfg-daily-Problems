Question Link : https://practice.geeksforgeeks.org/problems/longest-repeating-subsequence2004/1

Solution 1 : Recursive solution

class Solution {
	public:
	    int helper(string &s1,string &s2,int i,int j,vector<vector<int>>&dp){
	        if(i == s1.size() || j == s2.size()) return 0;
	        if(dp[i][j] != -1) return dp[i][j];
	        
			int take = 0;
			if(i != j && s1[i] == s2[j]){
				take = 1 + helper(s1,s2,i+1,j+1,dp);
			}

			int notTake = max(helper(s1,s2,i+1,j,dp), helper(s1,s2,i,j+1,dp));

			return dp[i][j] = max(take,notTake);
	    }

		int LongestRepeatingSubsequence(string str){
		    int n = str.size();
		    vector<vector<int>> dp(n,vector<int>(n,-1));
		    return helper(str,str,0,0,dp);
		}

};


Solution 2 : Iterative solution

class Solution {
	public:
		int LongestRepeatingSubsequence(string str){
		    int n = str.size();
		    vector<vector<int>> dp(n+1,vector<int>(n+1,0));
		    
		    for(int i=n-1;i>=0;i--){
		        for(int j=n-1;j>=0;j--){
		            int take = 0;
        			if(i != j && str[i] == str[j]){
        				take = 1 + dp[i+1][j+1];
        			}
        
        			int notTake = max(dp[i+1][j], dp[i][j+1]);
        
        			dp[i][j] = max(take,notTake);
		        }
		    }
		    
		    return dp[0][0];
		}

};

