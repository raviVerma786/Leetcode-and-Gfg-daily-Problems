Question Link : https://practice.geeksforgeeks.org/problems/9dacc32ad062be6e2ba8f6c41aad0b2b2376397d/1

Solution : 

class Solution{
public:
    int minCost(vector<vector<int>> &costs) {
        int n = costs.size(),k=costs[0].size();
        
        vector<vector<int>> dp(costs);
        
        //to store last two smallest costs
        priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>> pq;
        for(int i=0;i<k;i++){
            pq.push({costs[0][i],i});
        }
        
        
        for(int i=1;i<n;i++){
            priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>> temp;
            for(int j=0;j<k;j++){
                if(pq.top().second == j){
                    pair<int,int> num = pq.top();
                    pq.pop();
                    
                    if(pq.empty()) return -1; // no options to paint
                    
                    dp[i][j] += pq.top().first;
                    pq.push(num);
                }
                else{
                    dp[i][j] += pq.top().first;
                }
                
                temp.push({dp[i][j],j});
            }
            
            pq = temp;
        }
        
        int ans = INT_MAX;
        for(int i=0;i<k;i++){
            ans = min(ans,dp[n-1][i]);
        }
        
        return ans;
    }
};
