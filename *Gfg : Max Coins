Question Link : https://practice.geeksforgeeks.org/problems/111fb97b983399c0ee9f34b7bae18ac76bf6f07a/1

Solution : 

class Solution{
public:
    int maxCoins(int n,vector<vector<int>> &ranges){
        sort(ranges.begin(),ranges.end(),[](vector<int>&v1,vector<int>&v2){
            if(v1[0] == v2[0]) return v1[1] < v2[1];
            return v1[0] < v2[0];
        });
        
        vector<int> maxEle(n,0);// maxEle[i] => maximum coins present at index from i to n-1 
        maxEle[n-1] = ranges[n-1][2];
        for(int i=n-2;i>=0;i--){
            maxEle[i] = max(ranges[i][2],maxEle[i+1]);
        }
        
        int ans = 0;
        for(int i=0;i<n;i++){
          //checking next range not intersect or overlap
          int low = i+1,high = n-1;
          int idx = -1;
          while(low <= high){
              int mid = (low + high)/2;
              if(ranges[mid][0] >= ranges[i][1]){
                  idx = mid;
                  high = mid -1;
              }
              else low = mid + 1;
          }
          
          // updating answer
          if(idx != -1) ans = max(ans,ranges[i][2] + maxEle[idx]);
          else ans = max(ans,ranges[i][2]);
        }
        
        return ans;
        }
};
