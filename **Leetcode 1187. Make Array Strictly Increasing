Question Link : https://leetcode.com/problems/make-array-strictly-increasing/submissions/973130594/

Solution : 

//https://www.youtube.com/watch?v=IGaLoe1EKT4&ab_channel=ChirayuJain
class Solution {
public:
    int helper(vector<int>&arr1,vector<int>&arr2,vector<unordered_map<int,int>> &dp,int i,int last){
        if(i == arr1.size()) return 0;
        if(dp[i].find(last) != dp[i].end()) return dp[i][last];

        int res1 = 1e9, res2 = 1e9;
        if(arr1[i] > last){
            res1 = helper(arr1,arr2,dp,i+1,arr1[i]);
        }

        int rep = upper_bound(arr2.begin(),arr2.end(),last) - arr2.begin();
        if(rep < arr2.size()){
            res2 = 1 + helper(arr1,arr2,dp,i+1,arr2[rep]);
        }

        return dp[i][last] = min(res1,res2);
    }

    int makeArrayIncreasing(vector<int>& arr1, vector<int>& arr2) {
        int n = arr1.size();
        sort(arr2.begin(),arr2.end());
        vector<unordered_map<int,int>> dp(n);

        int operations = helper(arr1,arr2,dp,0,INT_MIN);

        return (operations >= 1e9 ? -1 : operations);
    }
};
