Question Link : https://leetcode.com/problems/all-nodes-distance-k-in-binary-tree/description/

Solution : 

class Solution {
    // https://www.youtube.com/watch?v=i9ORlEy6EsI&ab_channel=takeUforward
public:
    void markParents(TreeNode* root,unordered_map<TreeNode*,TreeNode*>&parent){
        TreeNode* node = root;
        parent[node] = NULL;

        queue<TreeNode*> q;
        q.push(node);

        while(!q.empty()){
            TreeNode* curr = q.front();
            q.pop();

            if(curr->left){
                parent[curr->left] = curr;
                q.push(curr->left);
            }

            if(curr->right){
                parent[curr->right] = curr;
                q.push(curr->right);
            }
        }
    }
    vector<int> distanceK(TreeNode* root, TreeNode* target, int k) {
        unordered_map<TreeNode*,TreeNode*> parent;
        markParents(root,parent);

        unordered_map<TreeNode*,bool> vis;
        queue<pair<TreeNode*,int>> q; //{node,distance}
        q.push({target,k});
        vis[target] = true;
        
        vector<int> ans;
        while(!q.empty()){
            TreeNode* node = q.front().first;
            int dis = q.front().second;
            q.pop();
            
            if(dis == 0){
                ans.push_back(node->val);
                continue;
            }

            if(parent[node] && !vis[parent[node]]){
                vis[parent[node]] = true;
                q.push({parent[node],dis-1});
            }

            if(node->left && !vis[node->left]){
                vis[node->left] = true;
                q.push({node->left,dis-1});
            }

            if(node->right && !vis[node->right]){
                vis[node->right] = true;
                q.push({node->right,dis-1});
            }
        }

        return ans;
    }
};
